@page "/event-signup"
@using Microsoft.EntityFrameworkCore
@using CommunityEventPlanner.Data
@using CommunityEventPlanner.Services
@inject IDbContextFactory<EventDataContext> EventDataContextFactory;
@inject NavigationManager NavigationManager;
@inject EventSignUpService EventSignUpService;

<style>
    .signup-panel {
        background-color: white;
        color: black; /* Ensure text inside the panel is black */
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        margin: 5rem auto; /* Centers the panel horizontally and adds space from the top */
    }

    .signup-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: url('images/background.jpg') no-repeat center center fixed;
        background-size: cover;
    }

    .signup-panel h2 {
        color: black; /* Ensure the title text is black */
    }

    .signup-panel label {
        color: black; /* Ensure label text is black */
    }
</style>

<div class="signup-container">
    <div class="signup-panel">
        <h2 class="text-center">Event Sign-Up</h2>
        @if (IsLoading)
        {
            <p>Loading...</p>
        }
        else
        {
            @if (EventDetails == null)
            {
                <p>Event not found.</p>
            }
            else
            {
                <h3>Sign Up for @EventDetails.Description</h3>
                <EditForm Model="@NewRegistration" OnValidSubmit="SignUpForEvent">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Event:</label>
                        <InputText class="form-control" @bind-Value="EventDetails.Description" Disabled="true" />
                    </div>

                    <div class="form-group">
                        <label>User:</label>
                        <InputText class="form-control" @bind-Value="CurrentUser.Username" Disabled="true" />
                    </div>

                    <p></p>
                    <p></p>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Sign Up</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </EditForm>
            }
        }
    </div>
</div>

@code {
    private EventRegistration NewRegistration { get; set; } = new EventRegistration();
    private Event EventDetails { get; set; }
    private User CurrentUser { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (EventSignUpService.EventId == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        using (var context = await EventDataContextFactory.CreateDbContextAsync())
        {
            EventDetails = await context.Events.FindAsync(EventSignUpService.EventId);

            if (AuthenticationStatus.IsLoggedIn)
            {
                CurrentUser = await context.Users.FirstOrDefaultAsync(u => u.Username == AuthenticationStatus.Username);
            }
        }

        IsLoading = false;
    }

    private async Task SignUpForEvent()
    {
        using (var context = await EventDataContextFactory.CreateDbContextAsync())
        {
            NewRegistration.EventId = EventDetails.Id;
            NewRegistration.UserId = CurrentUser.Id;

            context.EventRegistrations.Add(NewRegistration);
            await context.SaveChangesAsync();
        }

        // Clear the event ID from the service
        EventSignUpService.ClearEventId();

        // Redirect to the index page after successful sign-up
        NavigationManager.NavigateTo("/");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
